/**
 * Grid SCSS Partial
 *
 * @requires framework/_variables.scss
 * 
 */

/**
*   ##  HTML
*       The comments immediately after each <div class="grid__unit"></div> element
*       are vital for the grid to work.
*
*   <div class="g module-name">
*     <div class="grid__unit">
*     <p>Lorem Ipsum</p>
*     <div><!--
*    --><div class="grid__unit">
*       <p>Pellentesque elim</p>
*     </div><!--
*    --><div class="grid__unit">
*       <p>Dolor Sit</p>
*     </div>
*   </div>
*
*
*   ##  CSS (Sass)
*       Grid units are controlled by their parent element. In the example
*       the parent is .module-name.
*       The grid is then declared for min-width breakpoints using a Sass map
*       defaulting at 100% at its smallest. This allows as many breakpoints to be
*       declared per grid set.
*       If multiple modules use the same grid layout, just add more module-names
*       To the parent selector as shown below:
*
*   .grid__unit {
*       .module-name &,
*       .module-name-2 & { 
*           @include grid-column((450: 1, 750: 2, 950: 3, 1200: 6));
*       }    
*       .module-name-3 & { 
*           @include grid-column((450: 1, 950: 2, 1200: 4));
*       }    
*   }
*/


// @mixin grid-column($cols) {
//     @each $col-break, $col-num in $cols {
//         @include min-width($col-break) {
//             width: (100%/ $col-num);
//         }
//     }
// }

$grid-gutter: 16;
$grid-columns: 12;

$grid-col: 12;
$grid-col-s: 6;
$grid-col-m: 10;
$grid-col-l: 12;

$grid-bp-m: 600;
$grid-bp-l: 960;

@function grid-unit($n, $t, $i: true) {
    $tt: $t + 1;
    @if ($i == false) {
        $tt: $t - 1;
    }
    @return #{(100% / $t * $n)} - #{rem(($grid-gutter * ($tt) / $t * $n) - (16 * ($n - 1)))};
}
@function grid-indent($n, $t, $i: true) {
    @if ($i == false) {
        @return #{grid-unit($n, $t, false)} + #{rem(16 * ($n - 1))};
    }
    @else {
        @return #{rem(($grid-gutter * ($n + 1)) - ($grid-gutter * ($t + 1) / $t * $n))} + #{(100% / $t * $n)} ;
    }
}
@mixin grid-column($n, $t: $grid-col) {
    width: calc(#{grid-unit($n, $t)});
}
@mixin grid-indent($n, $t: $grid-col) {
    margin-left: calc(#{grid-indent($n, $t)});
}
.g {
    @at-root {
        [class*= " g_"] {
            display: inline-block;
            vertical-align: top;
            margin-left: rem($grid-gutter);
        }
    }
    @for $i from 1 through $grid-col {
        &_#{$i} { @include grid-column($i); }
    }
    @for $i from 1 through ($grid-col - 1) {
        &i_#{$i} { @include grid-indent($i); }
    }
    @include min-width($grid-bp-m) {
        @for $i from 1 through $grid-col {
            &_#{$i}-m { @include grid-column($i); }
        }
        @for $i from 1 through ($grid-col - 1) {
            &i_#{$i}-m { @include grid-indent($i); }
        }
    }
    @include min-width($grid-bp-l) {
        @for $i from 1 through $grid-col {
            &_#{$i}-l { @include grid-column($i); }
        }
        @for $i from 1 through ($grid-col - 1) {
            &i_#{$i}-l { @include grid-indent($i); }
        }
    }
    &-oh {
        overflow: hidden;
    }
}

.test-grid {
    display: none; // TODO: Make this toggleable
    pointer-events: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    .group {
        min-height: 100vh;
        background-clip: content-box;
        white-space: nowrap;
    }
    [class*= " g_"] {
        background: rgba(red, 0.1);
        border: 1px solid red;
        border-width: 0 1px;
        min-height: 100vh;
        color: red;
        font-weight: bold;
        text-align: center;
        padding-top: unit();
    }
}