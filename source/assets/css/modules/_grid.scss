/**
 * Grid SCSS Partial
 *
 * @requires framework/_variables.scss
 * 
 */

/**
*   ##  HTML
*       The comments immediately after each <div class="grid__unit"></div> element
*       are vital for the grid to work.
*
*   <div class="g module-name">
*     <div class="grid__unit">
*     <p>Lorem Ipsum</p>
*     <div><!--
*    --><div class="grid__unit">
*       <p>Pellentesque elim</p>
*     </div><!--
*    --><div class="grid__unit">
*       <p>Dolor Sit</p>
*     </div>
*   </div>
*
*
*   ##  CSS (Sass)
*       Grid units are controlled by their parent element. In the example
*       the parent is .module-name.
*       The grid is then declared for min-width breakpoints using a Sass map
*       defaulting at 100% at its smallest. This allows as many breakpoints to be
*       declared per grid set.
*       If multiple modules use the same grid layout, just add more module-names
*       To the parent selector as shown below:
*
*   .grid__unit {
*       .module-name &,
*       .module-name-2 & { 
*           @include grid-column((450: 1, 750: 2, 950: 3, 1200: 6));
*       }    
*       .module-name-3 & { 
*           @include grid-column((450: 1, 950: 2, 1200: 4));
*       }    
*   }
*/


// @mixin grid-column($cols) {
//     @each $col-break, $col-num in $cols {
//         @include min-width($col-break) {
//             width: (100%/ $col-num);
//         }
//     }
// }

$grid-gutter: 16;

@mixin grid-column($n, $t: 12) {
    // width: 100 / $t * $n * 1%;
    width: calc(#{$n / $t * 100%} - #{$grid-gutter / ($t - 1) * $n}px);
}
.g {
    @at-root {
        [class*="g--"] {
            display: inline-block;
            vertical-align: top;
            overflow: hidden;
        }
    }
    &--2 {
        @include grid-column(2);
    }
    &--3 {
        @include grid-column(3);
    }
    &--4 {
        @include grid-column(4);
    }
    &--6 {
        @include grid-column(6);
    }
    &--7 {
        @include grid-column(7);
    }
    &--9 {
        @include grid-column(9);
    }
    &i {
        @at-root {
            [class*="g__i--"] {
                display: block;
            }
        }
        &--1 {
            margin-left: 100 / 12 * 1%;
        }
        &--2 {
            margin-left: 100 / 12 * 2 * 1%;
        }
        &--3 {
            margin-left: 100 / 12 * 3 * 1%;
        }
    }
    // margin: 0 rem(-($grid-gutter/2));
    // max-width: none;
    // width: 100%;
    // &__unit {
    //     display: inline-block;
    //     padding: 0 rem($grid-gutter/2);
    //     vertical-align: top;
    //     width:100%;
    //     // .module-name & {
    //     //     @include grid-column(($bp-tiny: 1, $bp-small: 2, $bp-large: 4));
    //     // }
    //     // .module-name-2 & {
    //     //     @include grid-column(($bp-tiny: 2, $bp-small: 2, $bp-mid: 3, $bp-large: 6));
    //     // }
    // }
    // &__break {
    //     width: 100%;
    //     display: block;
    // }
}