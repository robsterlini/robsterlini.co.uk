/**
 * Mixins SCSS File
 */

@mixin cf() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
	*zoom: 1;
}

@mixin cover($type: 'absolute') {
	height:100%;
	left:0;
	position: $type;
	top:0;
	width:100%;
}

@mixin max-height($bp) {
	$unit: $bp / 16;
	@media only screen and (max-height: $unit + em) {
		@content;
	}
}

@mixin min-height($bp) {
	$unit: ($bp + 1) / 16;
	@media only screen and (min-height: $unit + em) {
		@content;
	}
}

@mixin max-width($bp) {
	$unit: $bp / 16;
	@media only screen and (max-width: $unit + em) {
		@content;
	}
}
@mixin min-width($bp) {
	$unit: ($bp + 1) / 16;
	@media only screen and (min-width: $unit + em) {
		@content;
	}
}

@mixin min-max-width($bp-min, $bp-max) {
	$unit-min: ($bp-min + 1) / 16;
	$unit-max: $bp-max / 16;
	@media only screen and (min-width: $unit-min + em) and (max-width: $unit-max + em) {
		@content;
	}
}

@mixin aspect-ratio($x, $y, $type: "max") {
	$query: '';
	@if $type == 'min' {
		$query: 'min-aspect-ratio';
	} @else {
		$query: 'max-aspect-ratio';
	}
	@media ($query: #{$x}/#{$y}) {
		@content;
	}
}

@mixin hyphenate() {
	// Browser fixes for hyphenation â€“ be careful in Chrome though as this breaks without hyphens (current v36)
	word-break: break-all;
	word-wrap: break-word;
	word-break: break-word;
	hyphens: auto;
}

/* ==|== Type =================
	Functions
========================================== */

/**
 * Takes a pixel value, and turns it in to the corresponding em value.
 *
 * Has an optional second parameter, which alters the base em value.
 * This can be useful when calculating a measurement on an element with
 * an altered font size.

 * @param int $target 	The pixel value you're converting.
 * @param int $content 	The base em value. If no value
 *						is provided, the $measure value is
 *						used.
 */

/**
 * === EXAMPLE === *

 Both these examples output a padding-left value equivalent to 30px.

 $measure:20;

 .element {
 	padding-left:em(30); // => padding-left: 1.5em;
 }

.element--large {
	font-size:2rem;
	padding-left:em(30, 40); // => padding-left: 0.75em;
}
*/

@function em($target, $content: $measure) {
	@if $target == 0 { @return 0 }
	@return $target / $content + 0em;
}

/**
 * Takes a pixel value, and turns it in to the corresponding rem value.
 *
 * Has an optional second parameter, which alters the base rem value.
 * This can be useful when calculating a measurement on an element with
 * an altered font size.

 * @param int $target 	The pixel value you're converting.
 * @param int $content 	The base rem value. If no value
 *						is provided, the $measure value is
 *						used.
 */

@function rem($target, $content: $measure) {
	@if $target == 0 { @return 0 }
	@return $target / $content + 0rem;
}

/* ==|== Type =================
	Mixins
========================================== */

/**
 * Converts a pixel-based font size to a rem font size, with px fallback
 * for IE <= 8.
 *
 * @param int $value	The pixel value you're converting.
 * @param int $base 	The base rem value. If no value is provided, the
 * 						$measure value is used.
**/

@mixin font-size($value, $base: $measure) {
	$rem: $value/$base;
	font-size:$value + px;
	font-size:$rem + rem;
}

/* ==|== Type =================
	CSS3 OT font-feature-settings
========================================== */

/**
 * Gets the correct CSS3 font-feature-settings to deal with the cross-browser skullduggery
 * Use the syntax @include font-feature-settings(kern liga clig);
 * See http://blog.webink.com/opentype-features-css/ for full list of them
 * But make sure the typeface you're using has the features otherwise they won't show.
**/

@mixin font-feature-settings($feature-list: false) {
	@if $feature-list
	{
		$standard: ();
		@each $feature in $feature-list
		{
			$standard: append( $standard, '#{$feature}' 1, comma );
		}
		-moz-font-feature-settings: $standard;
		-ms-font-feature-settings: $standard;
		-o-font-feature-settings: $standard;
		-webkit-font-feature-settings: $standard;
		font-feature-settings: $standard;
	}
}

@mixin sc {
	font-feature-settings: "smcp" 1, "c2sc" 1, "lnum" 1, "kern" 1;
}